//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FriendFit.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FriendFitDBContext : DbContext
    {
        public FriendFitDBContext()
            : base("name=FriendFitDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActualDistanceExercise> ActualDistanceExercises { get; set; }
        public virtual DbSet<ActualExcerciseSet> ActualExcerciseSets { get; set; }
        public virtual DbSet<ActualFreeTextExercise> ActualFreeTextExercises { get; set; }
        public virtual DbSet<ActualLevelExercise> ActualLevelExercises { get; set; }
        public virtual DbSet<ActualRepsExercise> ActualRepsExercises { get; set; }
        public virtual DbSet<ActualTimedExercise> ActualTimedExercises { get; set; }
        public virtual DbSet<ActualWeightExercise> ActualWeightExercises { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DeliveryTypeMaster> DeliveryTypeMasters { get; set; }
        public virtual DbSet<DeviceMaster> DeviceMasters { get; set; }
        public virtual DbSet<DistanceExercise> DistanceExercises { get; set; }
        public virtual DbSet<DistanceExerciseSet> DistanceExerciseSets { get; set; }
        public virtual DbSet<DurationMaster> DurationMasters { get; set; }
        public virtual DbSet<EditPrice> EditPrices { get; set; }
        public virtual DbSet<ExcerciseSet> ExcerciseSets { get; set; }
        public virtual DbSet<Exercise> Exercises { get; set; }
        public virtual DbSet<ExerciseTypeMaster> ExerciseTypeMasters { get; set; }
        public virtual DbSet<FreeTextExercise> FreeTextExercises { get; set; }
        public virtual DbSet<FrequencyMaster> FrequencyMasters { get; set; }
        public virtual DbSet<FriendsInvitation> FriendsInvitations { get; set; }
        public virtual DbSet<LevelExercise> LevelExercises { get; set; }
        public virtual DbSet<Link> Links { get; set; }
        public virtual DbSet<Logo> Logoes { get; set; }
        public virtual DbSet<MailTimeLog> MailTimeLogs { get; set; }
        public virtual DbSet<Recurrence> Recurrences { get; set; }
        public virtual DbSet<RepsExercise> RepsExercises { get; set; }
        public virtual DbSet<ScheduleExercise> ScheduleExercises { get; set; }
        public virtual DbSet<ScheduleGoalExcerciseSet> ScheduleGoalExcerciseSets { get; set; }
        public virtual DbSet<ScheduleGoalWeightExercise> ScheduleGoalWeightExercises { get; set; }
        public virtual DbSet<ScheduleWeeklyMaster> ScheduleWeeklyMasters { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<SubscriptionTypeMaster> SubscriptionTypeMasters { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TextExercise> TextExercises { get; set; }
        public virtual DbSet<TimedExercise> TimedExercises { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserToken> UserTokens { get; set; }
        public virtual DbSet<WeightExercise> WeightExercises { get; set; }
        public virtual DbSet<WorkOut> WorkOuts { get; set; }
        public virtual DbSet<WorkOutSchedule> WorkOutSchedules { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<ScheduleActualDistanceExercise> ScheduleActualDistanceExercises { get; set; }
        public virtual DbSet<ScheduleActualExcerciseSet> ScheduleActualExcerciseSets { get; set; }
        public virtual DbSet<ScheduleActualFreeTextExercise> ScheduleActualFreeTextExercises { get; set; }
        public virtual DbSet<ScheduleActualLevelExercise> ScheduleActualLevelExercises { get; set; }
        public virtual DbSet<ScheduleActualRepsExercise> ScheduleActualRepsExercises { get; set; }
        public virtual DbSet<ScheduleActualTimedExercise> ScheduleActualTimedExercises { get; set; }
        public virtual DbSet<ScheduleActualWeightExercise> ScheduleActualWeightExercises { get; set; }
        public virtual DbSet<ScheduleGoalDistanceExercise> ScheduleGoalDistanceExercises { get; set; }
        public virtual DbSet<ScheduleGoalFreeTextExercise> ScheduleGoalFreeTextExercises { get; set; }
        public virtual DbSet<ScheduleGoalLevelExercise> ScheduleGoalLevelExercises { get; set; }
        public virtual DbSet<ScheduleGoalRepsExercise> ScheduleGoalRepsExercises { get; set; }
        public virtual DbSet<ScheduleGoalTextExercise> ScheduleGoalTextExercises { get; set; }
        public virtual DbSet<ScheduleGoalTimedExercise> ScheduleGoalTimedExercises { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PurchaseProductsList> PurchaseProductsLists { get; set; }
        public virtual DbSet<tblPrice> tblPrices { get; set; }
        public virtual DbSet<ImperialMetric> ImperialMetrics { get; set; }
        public virtual DbSet<UserProductPayment> UserProductPayments { get; set; }
        public virtual DbSet<UserInvitation> UserInvitations { get; set; }
        public virtual DbSet<UserPurchaseProductsList> UserPurchaseProductsLists { get; set; }
    
        public virtual int AddActualDistanceExercise(Nullable<int> repsSetsTime, Nullable<long> actualExerciseSetId)
        {
            var repsSetsTimeParameter = repsSetsTime.HasValue ?
                new ObjectParameter("RepsSetsTime", repsSetsTime) :
                new ObjectParameter("RepsSetsTime", typeof(int));
    
            var actualExerciseSetIdParameter = actualExerciseSetId.HasValue ?
                new ObjectParameter("ActualExerciseSetId", actualExerciseSetId) :
                new ObjectParameter("ActualExerciseSetId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActualDistanceExercise", repsSetsTimeParameter, actualExerciseSetIdParameter);
        }
    
        public virtual int AddActualExercise(Nullable<long> excerciseId, Nullable<int> setsNumber, Nullable<decimal> distanceInKm, string imperialType)
        {
            var excerciseIdParameter = excerciseId.HasValue ?
                new ObjectParameter("ExcerciseId", excerciseId) :
                new ObjectParameter("ExcerciseId", typeof(long));
    
            var setsNumberParameter = setsNumber.HasValue ?
                new ObjectParameter("SetsNumber", setsNumber) :
                new ObjectParameter("SetsNumber", typeof(int));
    
            var distanceInKmParameter = distanceInKm.HasValue ?
                new ObjectParameter("DistanceInKm", distanceInKm) :
                new ObjectParameter("DistanceInKm", typeof(decimal));
    
            var imperialTypeParameter = imperialType != null ?
                new ObjectParameter("ImperialType", imperialType) :
                new ObjectParameter("ImperialType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActualExercise", excerciseIdParameter, setsNumberParameter, distanceInKmParameter, imperialTypeParameter);
        }
    
        public virtual int AddActualFreeTextExercise(Nullable<long> exerciseId, string text)
        {
            var exerciseIdParameter = exerciseId.HasValue ?
                new ObjectParameter("ExerciseId", exerciseId) :
                new ObjectParameter("ExerciseId", typeof(long));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActualFreeTextExercise", exerciseIdParameter, textParameter);
        }
    
        public virtual int AddActualLevelExercise(Nullable<decimal> totalWeight, Nullable<long> totalRaps, string imperialType, Nullable<long> actualExerciseSetId)
        {
            var totalWeightParameter = totalWeight.HasValue ?
                new ObjectParameter("TotalWeight", totalWeight) :
                new ObjectParameter("TotalWeight", typeof(decimal));
    
            var totalRapsParameter = totalRaps.HasValue ?
                new ObjectParameter("TotalRaps", totalRaps) :
                new ObjectParameter("TotalRaps", typeof(long));
    
            var imperialTypeParameter = imperialType != null ?
                new ObjectParameter("ImperialType", imperialType) :
                new ObjectParameter("ImperialType", typeof(string));
    
            var actualExerciseSetIdParameter = actualExerciseSetId.HasValue ?
                new ObjectParameter("ActualExerciseSetId", actualExerciseSetId) :
                new ObjectParameter("ActualExerciseSetId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActualLevelExercise", totalWeightParameter, totalRapsParameter, imperialTypeParameter, actualExerciseSetIdParameter);
        }
    
        public virtual int AddActualRapsExercise(Nullable<long> actualExerciseSetId, Nullable<int> repsSets)
        {
            var actualExerciseSetIdParameter = actualExerciseSetId.HasValue ?
                new ObjectParameter("ActualExerciseSetId", actualExerciseSetId) :
                new ObjectParameter("ActualExerciseSetId", typeof(long));
    
            var repsSetsParameter = repsSets.HasValue ?
                new ObjectParameter("RepsSets", repsSets) :
                new ObjectParameter("RepsSets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActualRapsExercise", actualExerciseSetIdParameter, repsSetsParameter);
        }
    
        public virtual int AddActualTimedExercise(Nullable<long> actualExerciseSetId, Nullable<int> timedSet)
        {
            var actualExerciseSetIdParameter = actualExerciseSetId.HasValue ?
                new ObjectParameter("ActualExerciseSetId", actualExerciseSetId) :
                new ObjectParameter("ActualExerciseSetId", typeof(long));
    
            var timedSetParameter = timedSet.HasValue ?
                new ObjectParameter("TimedSet", timedSet) :
                new ObjectParameter("TimedSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActualTimedExercise", actualExerciseSetIdParameter, timedSetParameter);
        }
    
        public virtual int AddActualWeightExercise(Nullable<long> totalWeight, Nullable<long> totalRaps, string imperialType, Nullable<long> generated_ActualExerciseSet_Id)
        {
            var totalWeightParameter = totalWeight.HasValue ?
                new ObjectParameter("TotalWeight", totalWeight) :
                new ObjectParameter("TotalWeight", typeof(long));
    
            var totalRapsParameter = totalRaps.HasValue ?
                new ObjectParameter("TotalRaps", totalRaps) :
                new ObjectParameter("TotalRaps", typeof(long));
    
            var imperialTypeParameter = imperialType != null ?
                new ObjectParameter("ImperialType", imperialType) :
                new ObjectParameter("ImperialType", typeof(string));
    
            var generated_ActualExerciseSet_IdParameter = generated_ActualExerciseSet_Id.HasValue ?
                new ObjectParameter("Generated_ActualExerciseSet_Id", generated_ActualExerciseSet_Id) :
                new ObjectParameter("Generated_ActualExerciseSet_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActualWeightExercise", totalWeightParameter, totalRapsParameter, imperialTypeParameter, generated_ActualExerciseSet_IdParameter);
        }
    
        public virtual int AddDistanceExercise(Nullable<int> repsSetsTime, Nullable<long> exerciseSetId)
        {
            var repsSetsTimeParameter = repsSetsTime.HasValue ?
                new ObjectParameter("RepsSetsTime", repsSetsTime) :
                new ObjectParameter("RepsSetsTime", typeof(int));
    
            var exerciseSetIdParameter = exerciseSetId.HasValue ?
                new ObjectParameter("ExerciseSetId", exerciseSetId) :
                new ObjectParameter("ExerciseSetId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDistanceExercise", repsSetsTimeParameter, exerciseSetIdParameter);
        }
    
        public virtual int AddExercise(Nullable<long> userId, Nullable<long> workOutId, string exerciseName, Nullable<long> exerciseTypeId, Nullable<int> setsNumber, string imperialType, Nullable<decimal> distanceInKm)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var workOutIdParameter = workOutId.HasValue ?
                new ObjectParameter("WorkOutId", workOutId) :
                new ObjectParameter("WorkOutId", typeof(long));
    
            var exerciseNameParameter = exerciseName != null ?
                new ObjectParameter("ExerciseName", exerciseName) :
                new ObjectParameter("ExerciseName", typeof(string));
    
            var exerciseTypeIdParameter = exerciseTypeId.HasValue ?
                new ObjectParameter("ExerciseTypeId", exerciseTypeId) :
                new ObjectParameter("ExerciseTypeId", typeof(long));
    
            var setsNumberParameter = setsNumber.HasValue ?
                new ObjectParameter("SetsNumber", setsNumber) :
                new ObjectParameter("SetsNumber", typeof(int));
    
            var imperialTypeParameter = imperialType != null ?
                new ObjectParameter("ImperialType", imperialType) :
                new ObjectParameter("ImperialType", typeof(string));
    
            var distanceInKmParameter = distanceInKm.HasValue ?
                new ObjectParameter("DistanceInKm", distanceInKm) :
                new ObjectParameter("DistanceInKm", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExercise", userIdParameter, workOutIdParameter, exerciseNameParameter, exerciseTypeIdParameter, setsNumberParameter, imperialTypeParameter, distanceInKmParameter);
        }
    
        public virtual int AddFreeTextExercise(Nullable<long> userId, Nullable<long> workOutId, string exerciseName, Nullable<long> exerciseTypeId, string text)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var workOutIdParameter = workOutId.HasValue ?
                new ObjectParameter("WorkOutId", workOutId) :
                new ObjectParameter("WorkOutId", typeof(long));
    
            var exerciseNameParameter = exerciseName != null ?
                new ObjectParameter("ExerciseName", exerciseName) :
                new ObjectParameter("ExerciseName", typeof(string));
    
            var exerciseTypeIdParameter = exerciseTypeId.HasValue ?
                new ObjectParameter("ExerciseTypeId", exerciseTypeId) :
                new ObjectParameter("ExerciseTypeId", typeof(long));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFreeTextExercise", userIdParameter, workOutIdParameter, exerciseNameParameter, exerciseTypeIdParameter, textParameter);
        }
    
        public virtual int AddFriendInvitation(Nullable<long> userId, Nullable<int> deliveryTypeId, string friendsName, Nullable<int> durationId, Nullable<System.DateTime> purchaseDate, Nullable<System.DateTime> expiryDate, Nullable<int> subscriptionTypeId, Nullable<decimal> cost, string email, string mobileNumber, Nullable<long> countryId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var deliveryTypeIdParameter = deliveryTypeId.HasValue ?
                new ObjectParameter("DeliveryTypeId", deliveryTypeId) :
                new ObjectParameter("DeliveryTypeId", typeof(int));
    
            var friendsNameParameter = friendsName != null ?
                new ObjectParameter("FriendsName", friendsName) :
                new ObjectParameter("FriendsName", typeof(string));
    
            var durationIdParameter = durationId.HasValue ?
                new ObjectParameter("DurationId", durationId) :
                new ObjectParameter("DurationId", typeof(int));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var subscriptionTypeIdParameter = subscriptionTypeId.HasValue ?
                new ObjectParameter("SubscriptionTypeId", subscriptionTypeId) :
                new ObjectParameter("SubscriptionTypeId", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFriendInvitation", userIdParameter, deliveryTypeIdParameter, friendsNameParameter, durationIdParameter, purchaseDateParameter, expiryDateParameter, subscriptionTypeIdParameter, costParameter, emailParameter, mobileNumberParameter, countryIdParameter);
        }
    
        public virtual int AddLevelExercise(Nullable<decimal> totalWeight, Nullable<long> totalRaps, string imperialType, Nullable<long> exerciseSetId)
        {
            var totalWeightParameter = totalWeight.HasValue ?
                new ObjectParameter("TotalWeight", totalWeight) :
                new ObjectParameter("TotalWeight", typeof(decimal));
    
            var totalRapsParameter = totalRaps.HasValue ?
                new ObjectParameter("TotalRaps", totalRaps) :
                new ObjectParameter("TotalRaps", typeof(long));
    
            var imperialTypeParameter = imperialType != null ?
                new ObjectParameter("ImperialType", imperialType) :
                new ObjectParameter("ImperialType", typeof(string));
    
            var exerciseSetIdParameter = exerciseSetId.HasValue ?
                new ObjectParameter("ExerciseSetId", exerciseSetId) :
                new ObjectParameter("ExerciseSetId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLevelExercise", totalWeightParameter, totalRapsParameter, imperialTypeParameter, exerciseSetIdParameter);
        }
    
        public virtual int AddMailSentTime(Nullable<long> userId, Nullable<bool> resetMail, Nullable<bool> verifyMail, Nullable<System.DateTime> mailSentTime)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var resetMailParameter = resetMail.HasValue ?
                new ObjectParameter("ResetMail", resetMail) :
                new ObjectParameter("ResetMail", typeof(bool));
    
            var verifyMailParameter = verifyMail.HasValue ?
                new ObjectParameter("VerifyMail", verifyMail) :
                new ObjectParameter("VerifyMail", typeof(bool));
    
            var mailSentTimeParameter = mailSentTime.HasValue ?
                new ObjectParameter("MailSentTime", mailSentTime) :
                new ObjectParameter("MailSentTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMailSentTime", userIdParameter, resetMailParameter, verifyMailParameter, mailSentTimeParameter);
        }
    
        public virtual int AddRapsExercise(Nullable<long> exerciseSetId, Nullable<int> repsSets)
        {
            var exerciseSetIdParameter = exerciseSetId.HasValue ?
                new ObjectParameter("ExerciseSetId", exerciseSetId) :
                new ObjectParameter("ExerciseSetId", typeof(long));
    
            var repsSetsParameter = repsSets.HasValue ?
                new ObjectParameter("RepsSets", repsSets) :
                new ObjectParameter("RepsSets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRapsExercise", exerciseSetIdParameter, repsSetsParameter);
        }
    
        public virtual int AddScheduleExercise(Nullable<long> userId, Nullable<long> workOutScheduleId, string exerciseName, Nullable<long> exerciseTypeId, Nullable<int> setsNumber)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var workOutScheduleIdParameter = workOutScheduleId.HasValue ?
                new ObjectParameter("WorkOutScheduleId", workOutScheduleId) :
                new ObjectParameter("WorkOutScheduleId", typeof(long));
    
            var exerciseNameParameter = exerciseName != null ?
                new ObjectParameter("ExerciseName", exerciseName) :
                new ObjectParameter("ExerciseName", typeof(string));
    
            var exerciseTypeIdParameter = exerciseTypeId.HasValue ?
                new ObjectParameter("ExerciseTypeId", exerciseTypeId) :
                new ObjectParameter("ExerciseTypeId", typeof(long));
    
            var setsNumberParameter = setsNumber.HasValue ?
                new ObjectParameter("SetsNumber", setsNumber) :
                new ObjectParameter("SetsNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddScheduleExercise", userIdParameter, workOutScheduleIdParameter, exerciseNameParameter, exerciseTypeIdParameter, setsNumberParameter);
        }
    
        public virtual int AddScheduleGoalWeightExercise(Nullable<long> totalWeight, Nullable<long> totalRaps, string imperialType, Nullable<long> generated_ExerciseSet_Id)
        {
            var totalWeightParameter = totalWeight.HasValue ?
                new ObjectParameter("TotalWeight", totalWeight) :
                new ObjectParameter("TotalWeight", typeof(long));
    
            var totalRapsParameter = totalRaps.HasValue ?
                new ObjectParameter("TotalRaps", totalRaps) :
                new ObjectParameter("TotalRaps", typeof(long));
    
            var imperialTypeParameter = imperialType != null ?
                new ObjectParameter("ImperialType", imperialType) :
                new ObjectParameter("ImperialType", typeof(string));
    
            var generated_ExerciseSet_IdParameter = generated_ExerciseSet_Id.HasValue ?
                new ObjectParameter("Generated_ExerciseSet_Id", generated_ExerciseSet_Id) :
                new ObjectParameter("Generated_ExerciseSet_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddScheduleGoalWeightExercise", totalWeightParameter, totalRapsParameter, imperialTypeParameter, generated_ExerciseSet_IdParameter);
        }
    
        public virtual int AddTimedExercise(Nullable<long> exerciseSetId, Nullable<int> timedSet)
        {
            var exerciseSetIdParameter = exerciseSetId.HasValue ?
                new ObjectParameter("ExerciseSetId", exerciseSetId) :
                new ObjectParameter("ExerciseSetId", typeof(long));
    
            var timedSetParameter = timedSet.HasValue ?
                new ObjectParameter("TimedSet", timedSet) :
                new ObjectParameter("TimedSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTimedExercise", exerciseSetIdParameter, timedSetParameter);
        }
    
        public virtual int AddUsers(string firstName, string lastName, string email, string password, string mobileNumber, Nullable<long> countryId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUsers", firstNameParameter, lastNameParameter, emailParameter, passwordParameter, mobileNumberParameter, countryIdParameter);
        }
    
        public virtual int AddWeightExercise(Nullable<long> totalWeight, Nullable<long> totalRaps, string imperialType, Nullable<long> generated_ExerciseSet_Id)
        {
            var totalWeightParameter = totalWeight.HasValue ?
                new ObjectParameter("TotalWeight", totalWeight) :
                new ObjectParameter("TotalWeight", typeof(long));
    
            var totalRapsParameter = totalRaps.HasValue ?
                new ObjectParameter("TotalRaps", totalRaps) :
                new ObjectParameter("TotalRaps", typeof(long));
    
            var imperialTypeParameter = imperialType != null ?
                new ObjectParameter("ImperialType", imperialType) :
                new ObjectParameter("ImperialType", typeof(string));
    
            var generated_ExerciseSet_IdParameter = generated_ExerciseSet_Id.HasValue ?
                new ObjectParameter("Generated_ExerciseSet_Id", generated_ExerciseSet_Id) :
                new ObjectParameter("Generated_ExerciseSet_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWeightExercise", totalWeightParameter, totalRapsParameter, imperialTypeParameter, generated_ExerciseSet_IdParameter);
        }
    
        public virtual int CreateNewToken(Nullable<long> userId, string tokenCode, Nullable<System.DateTime> expiryDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var tokenCodeParameter = tokenCode != null ?
                new ObjectParameter("TokenCode", tokenCode) :
                new ObjectParameter("TokenCode", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateNewToken", userIdParameter, tokenCodeParameter, expiryDateParameter);
        }
    
        public virtual ObjectResult<Editexercise_Result> Editexercise(Nullable<long> workOutId, Nullable<long> userId)
        {
            var workOutIdParameter = workOutId.HasValue ?
                new ObjectParameter("WorkOutId", workOutId) :
                new ObjectParameter("WorkOutId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Editexercise_Result>("Editexercise", workOutIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCompletedWorkout(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCompletedWorkout", userIdParameter);
        }
    
        public virtual ObjectResult<GetCountryList_Result> GetCountryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryList_Result>("GetCountryList");
        }
    
        public virtual ObjectResult<Nullable<int>> GetMissedWorkout(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMissedWorkout", userIdParameter);
        }
    
        public virtual int GetScheduleList(Nullable<long> workoutId)
        {
            var workoutIdParameter = workoutId.HasValue ?
                new ObjectParameter("WorkoutId", workoutId) :
                new ObjectParameter("WorkoutId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScheduleList", workoutIdParameter);
        }
    
        public virtual ObjectResult<ListOfFriends_Result> ListOfFriends(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListOfFriends_Result>("ListOfFriends", userIdParameter);
        }
    
        public virtual ObjectResult<ListOfWorkSchedule_Result> ListOfWorkSchedule(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListOfWorkSchedule_Result>("ListOfWorkSchedule", userIdParameter);
        }
    
        public virtual ObjectResult<LoginCustomer_Result> LoginCustomer(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginCustomer_Result>("LoginCustomer", emailParameter, passwordParameter);
        }
    
        public virtual int Logout(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Logout", userIdParameter);
        }
    
        public virtual ObjectResult<ScheduleDetailsByUserId_Result> ScheduleDetailsByUserId(Nullable<long> userId, Nullable<long> scheduleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScheduleDetailsByUserId_Result>("ScheduleDetailsByUserId", userIdParameter, scheduleIdParameter);
        }
    
        public virtual int SendRecurringNotification(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendRecurringNotification", userIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateExercise(Nullable<long> exerciseId, Nullable<long> userId, Nullable<long> workOutId, string exerciseName, Nullable<long> exerciseTypeId)
        {
            var exerciseIdParameter = exerciseId.HasValue ?
                new ObjectParameter("ExerciseId", exerciseId) :
                new ObjectParameter("ExerciseId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var workOutIdParameter = workOutId.HasValue ?
                new ObjectParameter("WorkOutId", workOutId) :
                new ObjectParameter("WorkOutId", typeof(long));
    
            var exerciseNameParameter = exerciseName != null ?
                new ObjectParameter("ExerciseName", exerciseName) :
                new ObjectParameter("ExerciseName", typeof(string));
    
            var exerciseTypeIdParameter = exerciseTypeId.HasValue ?
                new ObjectParameter("ExerciseTypeId", exerciseTypeId) :
                new ObjectParameter("ExerciseTypeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExercise", exerciseIdParameter, userIdParameter, workOutIdParameter, exerciseNameParameter, exerciseTypeIdParameter);
        }
    
        public virtual int UpdateScheduleWorkout(Nullable<long> scheduleId, Nullable<long> userId, Nullable<bool> monday, Nullable<bool> tuesday, Nullable<bool> wednesday, Nullable<bool> thursday, Nullable<bool> friday, Nullable<bool> saturday, Nullable<bool> sunday, Nullable<int> recurrenceId, Nullable<System.TimeSpan> scheduleTime, Nullable<System.TimeSpan> textMeTime, Nullable<System.TimeSpan> textFriendTime, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var mondayParameter = monday.HasValue ?
                new ObjectParameter("Monday", monday) :
                new ObjectParameter("Monday", typeof(bool));
    
            var tuesdayParameter = tuesday.HasValue ?
                new ObjectParameter("Tuesday", tuesday) :
                new ObjectParameter("Tuesday", typeof(bool));
    
            var wednesdayParameter = wednesday.HasValue ?
                new ObjectParameter("Wednesday", wednesday) :
                new ObjectParameter("Wednesday", typeof(bool));
    
            var thursdayParameter = thursday.HasValue ?
                new ObjectParameter("Thursday", thursday) :
                new ObjectParameter("Thursday", typeof(bool));
    
            var fridayParameter = friday.HasValue ?
                new ObjectParameter("Friday", friday) :
                new ObjectParameter("Friday", typeof(bool));
    
            var saturdayParameter = saturday.HasValue ?
                new ObjectParameter("Saturday", saturday) :
                new ObjectParameter("Saturday", typeof(bool));
    
            var sundayParameter = sunday.HasValue ?
                new ObjectParameter("Sunday", sunday) :
                new ObjectParameter("Sunday", typeof(bool));
    
            var recurrenceIdParameter = recurrenceId.HasValue ?
                new ObjectParameter("RecurrenceId", recurrenceId) :
                new ObjectParameter("RecurrenceId", typeof(int));
    
            var scheduleTimeParameter = scheduleTime.HasValue ?
                new ObjectParameter("ScheduleTime", scheduleTime) :
                new ObjectParameter("ScheduleTime", typeof(System.TimeSpan));
    
            var textMeTimeParameter = textMeTime.HasValue ?
                new ObjectParameter("TextMeTime", textMeTime) :
                new ObjectParameter("TextMeTime", typeof(System.TimeSpan));
    
            var textFriendTimeParameter = textFriendTime.HasValue ?
                new ObjectParameter("TextFriendTime", textFriendTime) :
                new ObjectParameter("TextFriendTime", typeof(System.TimeSpan));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScheduleWorkout", scheduleIdParameter, userIdParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter, sundayParameter, recurrenceIdParameter, scheduleTimeParameter, textMeTimeParameter, textFriendTimeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int UpdateToken(Nullable<long> userId, string tokenCode, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> expiryDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var tokenCodeParameter = tokenCode != null ?
                new ObjectParameter("TokenCode", tokenCode) :
                new ObjectParameter("TokenCode", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateToken", userIdParameter, tokenCodeParameter, createdOnParameter, expiryDateParameter);
        }
    
        public virtual int UpdateUser(Nullable<long> userId, string firstName, string lastName, string email, string password, string mobileNumber, Nullable<long> countryId, Nullable<bool> autoSMSSignUp, Nullable<bool> fullWorkoutStatus, Nullable<bool> workoutStatus)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var autoSMSSignUpParameter = autoSMSSignUp.HasValue ?
                new ObjectParameter("AutoSMSSignUp", autoSMSSignUp) :
                new ObjectParameter("AutoSMSSignUp", typeof(bool));
    
            var fullWorkoutStatusParameter = fullWorkoutStatus.HasValue ?
                new ObjectParameter("FullWorkoutStatus", fullWorkoutStatus) :
                new ObjectParameter("FullWorkoutStatus", typeof(bool));
    
            var workoutStatusParameter = workoutStatus.HasValue ?
                new ObjectParameter("WorkoutStatus", workoutStatus) :
                new ObjectParameter("WorkoutStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userIdParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, mobileNumberParameter, countryIdParameter, autoSMSSignUpParameter, fullWorkoutStatusParameter, workoutStatusParameter);
        }
    
        public virtual int UpdateWorkoutDetails(string description, Nullable<System.DateTime> dateOfWorkout, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> finishTime, string workoutNotes, Nullable<long> userId, Nullable<long> workOutId)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateOfWorkoutParameter = dateOfWorkout.HasValue ?
                new ObjectParameter("DateOfWorkout", dateOfWorkout) :
                new ObjectParameter("DateOfWorkout", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var finishTimeParameter = finishTime.HasValue ?
                new ObjectParameter("FinishTime", finishTime) :
                new ObjectParameter("FinishTime", typeof(System.TimeSpan));
    
            var workoutNotesParameter = workoutNotes != null ?
                new ObjectParameter("WorkoutNotes", workoutNotes) :
                new ObjectParameter("WorkoutNotes", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var workOutIdParameter = workOutId.HasValue ?
                new ObjectParameter("WorkOutId", workOutId) :
                new ObjectParameter("WorkOutId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkoutDetails", descriptionParameter, dateOfWorkoutParameter, startTimeParameter, finishTimeParameter, workoutNotesParameter, userIdParameter, workOutIdParameter);
        }
    
        public virtual ObjectResult<UserEditProfile_Result> UserEditProfile(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserEditProfile_Result>("UserEditProfile", userIdParameter);
        }
    
        public virtual ObjectResult<WorkoutDetailsById_Result> WorkoutDetailsById(Nullable<long> workoutId)
        {
            var workoutIdParameter = workoutId.HasValue ?
                new ObjectParameter("WorkoutId", workoutId) :
                new ObjectParameter("WorkoutId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkoutDetailsById_Result>("WorkoutDetailsById", workoutIdParameter);
        }
    
        public virtual ObjectResult<WorkoutList_Result> WorkoutList(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkoutList_Result>("WorkoutList", userIdParameter);
        }
    
        public virtual int Everyweek_InsertBulkworkout(Nullable<int> scheduleId)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Everyweek_InsertBulkworkout", scheduleIdParameter);
        }
    
        public virtual int InsertBulkworkout(Nullable<int> scheduleId)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBulkworkout", scheduleIdParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GetPrice(string duration, string recurring_Billing, string isSMS_SendVia)
        {
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var recurring_BillingParameter = recurring_Billing != null ?
                new ObjectParameter("Recurring_Billing", recurring_Billing) :
                new ObjectParameter("Recurring_Billing", typeof(string));
    
            var isSMS_SendViaParameter = isSMS_SendVia != null ?
                new ObjectParameter("IsSMS_SendVia", isSMS_SendVia) :
                new ObjectParameter("IsSMS_SendVia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetPrice", durationParameter, recurring_BillingParameter, isSMS_SendViaParameter);
        }
    
        public virtual ObjectResult<GetTransactionForFriend_Result> GetTransactionForFriend()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionForFriend_Result>("GetTransactionForFriend");
        }
    
        public virtual ObjectResult<GetTransactionForUser_Result> GetTransactionForUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionForUser_Result>("GetTransactionForUser");
        }
    
        public virtual ObjectResult<DeleteSchedule_Result> DeleteSchedule(Nullable<long> scheduleId, Nullable<long> userId)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteSchedule_Result>("DeleteSchedule", scheduleIdParameter, userIdParameter);
        }
    }
}
